---
- name: get network adpater information for Windows hosts
  hosts: windows
  gather_facts: no
  tasks:
  - name: get network connection name for private adapter
    win_shell: |
      foreach ($instance in (Get-CimInstance -ClassName Win32_NetworkAdapter -Filter "Netenabled='True'")) {
          $instance_config = Get-CimInstance -ClassName WIn32_NetworkAdapterConfiguration -Filter "Index = '$($instance.Index)'"
          if ($instance_config.IPAddress -contains "{{ansible_host}}") {
              $instance.NetConnectionID
          }
      }
    changed_when: False
    register: network_connection_name

- name: create Domain Controller
  hosts: DC
  gather_facts: no
  tasks:
  - name: set the DNS for the specified adapter to localhost
    win_dns_client:
      adapter_name: '{{ network_connection_name.stdout | trim }}'
      ipv4_addresses: 127.0.0.1

  - name: ensure domain exists and DC is promoted as a domain controller
    win_domain:
      dns_domain_name: '{{ domain_realm }}'
      safe_mode_password: '{{ domain_password }}'
    register: domain_setup_res

  - name: reboot DC if required after promotion
    win_reboot:
    when: domain_setup_res.reboot_required

  - name: create domain username
    win_domain_user:
      name: '{{ domain_username }}'
      upn: '{{ domain_username }}@{{ domain_realm | upper }}'
      password: '{{ domain_password }}'
      password_never_expires: yes
      groups:
      - Domain Admins
      state: present
      update_password: on_create
    register: create_user_res
    # After a reboot the AD services take a while to come back online
    retries: 30
    delay: 15
    until: create_user_res is successful

  - name: create proxy principal account
    win_domain_user:
      name: squid
      upn: squid@{{ domain_realm | upper }}
      password: '{{ domain_password }}'
      attributes:
        msDS-SupportedEncryptionTypes: 16  # AES256
      password_never_expires: yes
      user_cannot_change_password: yes
      state: present
      update_password: on_create

  - name: register SPN for proxy principal
    win_command: setspn -S HTTP/squid.{{ domain_realm }} squid
    register: spn_create
    changed_when: '"Updated object" in spn_create.stdout'
    failed_when: spn_create is failed and "Duplicate SPN found" not in spn_create.stdout

  - name: create keytab for proxy principal
    win_command: >
      ktpass -out C:\Windows\TEMP\proxy.keytab
      -princ HTTP/squid.{{ domain_realm }}@{{ domain_realm | upper }}
      -mapUser squid@{{ domain_realm | upper }}
      -pass {{ domain_password }}
      -crypto AES256-SHA1
      -pType KRB5_NT_PRINCIPAL
    args:
      creates: C:\Windows\TEMP\proxy.keytab

  - name: fetch proxy keytab
    fetch:
      src: C:\Windows\TEMP\proxy.keytab
      dest: proxy.keytab
      flat: yes

  - name: create DNS A record for proxy host
    win_shell: |
      $realm = '{{ domain_realm }}'
      $address = '{{ hostvars["SQUID"]["ansible_host"] }}'
      if (-not (Get-DnsServerResourceRecord -Name squid -ZoneName $realm -RRType 'A' -ErrorAction SilentlyContinue)) {
          Add-DnsServerResourceRecordA -Name squid -ZoneName $realm -IPv4Address $address
          "changed"
      }
    register: dns_record
    changed_when: dns_record.stdout|trim == "changed"

- name: join Windows hosts to the domain
  hosts: windows:!DC
  gather_facts: no
  tasks:
  - name: set the DNS for the private adapter to point to the DC
    win_dns_client:
      adapter_name: '{{ network_connection_name.stdout | trim }}'
      ipv4_addresses: '{{ hostvars["DC"]["ansible_host"] }}'

  - name: join host to the domain
    win_domain_membership:
      dns_domain_name: '{{ domain_realm }}'
      domain_admin_user: '{{ domain_username }}@{{ domain_realm | upper }}'
      domain_admin_password: '{{ domain_password }}'
      state: domain
    register: domain_join

  - name: reboot host to finalise domain join
    win_reboot:
    when: domain_join.reboot_required

- name: setup IIS test site
  hosts: IIS
  gather_facts: no
  tasks:
  - name: install IIS features
    win_feature:
      name:
      - Web-Server
      - Web-Windows-Auth
      state: present
    register: iis_install

  - name: reboot after installing IIS features
    win_reboot:
    when: iis_install.reboot_required

  - name: enable Windows auth and disable Anonymous auth
    win_shell: |
      $site = "IIS:\Sites"
      $auth = "System.WebServer/Security/Authentication"

      if (-not (Get-WebConfiguration -PSPath $site -Filter "$auth/WindowsAuthentication").Enabled) {
          Set-WebConfigurationProperty -PSPath $site -Filter "$auth/WindowsAuthentication" -Name Enabled -Value True
          "changed"
      }
      if ((Get-WebConfiguration -PSPath $site -Filter "$auth/AnonymousAuthentication").Enabled) {
          Set-WebConfigurationProperty -PSPath $site -Filter "$auth/AnonymousAuthentication" -Name Enabled -Value False
          "changed"
      }
    register: auth_res
    changed_when: '"changed" in auth_res.stdout'

- name: setup Kerberos config on linux hosts
  hosts: linux
  gather_facts: no
  become: yes
  tasks:
  - name: install Kerberos packages
    yum:
      name:
      - dnsmasq
      - krb5-devel
      - krb5-workstation
      state: present

  - name: setup NetworkManager to use dnsmasq
    copy:
      dest: /etc/NetworkManager/conf.d/dns.conf
      content: |
        [main]
        dns=dnsmasq
    register: networkman_conf

  - name: setup dnsmasq to forward requests for domain to DC
    copy:
      dest: /etc/NetworkManager/dnsmasq.d/{{ domain_realm }}
      content: address=/{{ domain_realm }}/{{ hostvars['DC']['ansible_host'] }}
    register: dnsmasq_conf

  - name: restart NetworkManager.service
    service:
      name: NetworkManager
      state: restarted
    when: networkman_conf is changed or dnsmasq_conf is changed

  - name: template krb5.conf file
    template:
      src: krb5.conf.j2
      dest: /etc/krb5.conf

- name: setup proxy server
  hosts: SQUID
  gather_facts: no
  become: yes
  tasks:
  - name: install Squid packages
    yum:
      name:
      - squid
      - httpd-tools
      - python-passlib
      state: present

  - name: copy squid keytab file
    copy:
      src: proxy.keytab
      dest: /etc/squid/squid.keytab
      group: squid

  - name: create htpasswd file for basic auth
    htpasswd:
      create: yes
      name: '{{ proxy_username }}'
      password: '{{ proxy_password }}'
      path: /etc/squid/passwd
      owner: squid
      state: present

  - name: template out Squid config files
    template:
      src: squid.conf.j2
      dest: /etc/squid/squid.{{ item.type }}.conf
      group: squid
    vars:
      auth: '{{ item.auth }}'
      port: '{{ item.port }}'
    with_items:
    - type: no_auth
      auth: none
      port: 3129
    - type: basic
      auth: basic
      port: 3130
    - type: ldap
      auth: ldap
      port: 3131
    - type: kerb
      auth: kerb
      port: 3132

  - name: template out squid service units
    template:
      src: systemd_unit.service.j2
      dest: /etc/systemd/system/squid_{{ item }}.service
    vars:
      description: Squid caching proxy - {{ item }}
      config_file: /etc/squid/squid.{{ item }}.conf
    with_items:
    - no_auth
    - basic
    - ldap
    - kerb

  - name: start proxy services
    systemd:
      name: squid_{{ item }}.service
      enabled: yes
      state: started
    with_items:
    - no_auth
    - basic
    - ldap
    - kerb

- name: setup Ansible controller test host
  hosts: ANSIBLE
  gather_facts: no
  become: yes
  tasks:
  - name: setup epel-release
    yum:
      name: epel-release
      state: present

  - name: install pip and other base packages
    yum:
      name:
      - gcc
      - python-devel
      - python-pip
      state: present

  - name: install Ansible
    pip:
      name:
      - ansible
      - pywinrm[kerberos,credssp]

  - name: create test folder
    file:
      path: ~/proxy-tests
      state: directory
    become: no

  - name: copy across test playbook and inventory
    copy:
      src: '{{ item }}'
      dest: ~/proxy-tests/{{ item }}
    become: no
    with_items:
    - inventory.yml
    - tests.yml
